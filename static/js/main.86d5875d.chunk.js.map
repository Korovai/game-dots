{"version":3,"sources":["components/error-indicator/error.png","components/spinner/spinner.js","components/error-indicator/error-indicator.js","components/header/header.js","components/play-zone/play-zone.js","components/results/results.js","services/game-services.js","components/app/app.js","index.js"],"names":["module","exports","Spinner","className","ErrorIndicator","src","iconError","alt","Header","settings","onOpenSelector","currentModeName","onSelectMode","gameStart","onGetDataPlayer","items","map","item","id","mode","key","onClick","onChange","type","maxLength","placeholder","PlayZone","currentMode","field","size","arrayFields","onSelectField","num","siz","fields","namesClass","style","width","height","name","Results","winners","winner","date","GameService","_gameSettings","_winnersResults","getSettings","url","a","fetch","res","ok","Error","status","json","objSettings","resSettings","Object","entries","_transformSettings","getWinners","objWinners","resWinners","_transformWinners","slice","length","getIdMode","getFieldSize","document","documentElement","clientWidth","getNameMode","getCustomDelay","delay","App","gameService","state","loading","error","dataPlayer","playerPoints","computerPoints","start","selectedFieldId","stop","winnerDate","loadingGameSettings","then","setState","catch","onError","loadingLeaderBoard","e","querySelector","classList","toggle","arrFields","i","Math","pow","remove","target","value","dataValidation","flag","selectValidation","inputValidation","messageArea","color","activeElements","pointerEvents","disabled","inactiveElements","setInterval","randomField","innerHTML","arr","idField","getWinTime","currentDate","Date","getHours","getMinutes","getDate","getMonth","getFullYear","buf","k","rand","floor","random","toggleNamesClass","oldItem","newItem","points1","points2","clearInterval","setDate","userData","method","headers","body","JSON","stringify","response","console","log","this","prevState","idRand","app","spinner","errorMessage","visibleContent","Fragment","Component","ReactDOM","render","getElementById"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,mC,+QCgB5BC,G,MAZC,WACd,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,oBACb,8BAAW,8BAAW,mC,yBCOjBC,EAXQ,WACrB,OACE,yBAAKD,UAAU,oBACb,yBAAKE,IAAKC,IAAWC,IAAI,eACzB,0BAAMJ,UAAU,QAAhB,SACA,mEACA,kECuBSK,G,MA9BA,SAAC,GAA2F,IAA1FC,EAAyF,EAAzFA,SAAUC,EAA+E,EAA/EA,eAAgBC,EAA+D,EAA/DA,gBAAiBC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,gBAC7EC,EAAQN,EAASO,KAAI,SAACC,GAAU,IAC7BC,EAAYD,EAAZC,GAAIC,EAAQF,EAARE,KAEX,OACE,wBAAIC,IAAKF,EAAIG,QAAS,kBAAMT,EAAaM,IAAKf,UAAU,qCAAqCgB,MAIjG,OACE,yBAAKhB,UAAU,YACb,yBAAKA,UAAU,SAAf,oBACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBACb,yBAAKkB,QAASX,EAAgBP,UAAU,gCAAgCQ,GACxE,wBAAIR,UAAU,6BACXY,KAKP,yBAAKZ,UAAU,cAAa,2BAAOmB,SAAUR,EAAiBS,KAAK,OAAOpB,UAAU,WAAWqB,UAAU,KAAKC,YAAY,qBAE1H,6BAAK,4BAAQJ,QAASR,EAAWV,UAAU,WAAtC,aCHEuB,G,MArBE,SAAC,GAA8D,IAAD,IAA5DC,YAAcC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,KAAOC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,cACpDC,EAAMJ,EACNK,EAAMJ,EACNK,EAASJ,EAAYd,KAAI,SAACC,GAAU,IACjCC,EAAkBD,EAAlBC,GAAIiB,EAAclB,EAAdkB,WAEX,OACE,yBAAKd,QAAS,kBAAMU,EAAcb,IAAKE,IAAKF,EAAIf,UAAWgC,EAAYC,MAAO,CAACC,MAAM,GAAD,OAAKJ,EAAL,MAAcK,OAAO,GAAD,OAAKL,EAAL,YAI5G,OACE,yBAAK9B,UAAU,cACb,yBAAKA,UAAU,aAAY,8BAAUoC,KAAK,OAAOpC,UAAU,WAAhC,gCAC3B,yBAAKA,UAAU,WAAWiC,MAAO,CAACC,MAAM,GAAD,OAAKL,EAAIC,EAAQ,EAAJD,EAAb,QACpCE,MCOMM,G,MAtBE,SAAC,GAAe,IACzBzB,EADwB,EAAb0B,QACKzB,KAAI,SAACC,GAAU,IAC5BC,EAAoBD,EAApBC,GAAIwB,EAAgBzB,EAAhByB,OAAQC,EAAQ1B,EAAR0B,KAEnB,OACE,wBAAIvB,IAAKF,EAAIf,UAAU,kBACrB,yBAAKA,UAAU,aAAauC,GAC5B,yBAAKvC,UAAU,eAAewC,OAKpC,OACE,yBAAKxC,UAAU,aACb,yBAAKA,UAAU,gBAAf,gBACA,wBAAIA,UAAU,cACXY,M,uBCpBY6B,E,iDACnBC,cAAgB,kE,KAChBC,gBAAkB,4D,KAElBC,Y,uCAAc,WAAMC,GAAN,mBAAAC,EAAA,sEACMC,MAAM,EAAKL,eADjB,WACNM,EADM,QAGJC,GAHI,sBAIJ,IAAIC,MAAJ,0BAA6B,EAAKR,cAAlC,sBAA6DM,EAAIG,SAJ7D,uBAMcH,EAAII,OANlB,cAMNC,EANM,OAONC,EAAcC,OAAOC,QAAQH,GAPvB,kBAQLC,EAAYzC,IAAI,EAAK4C,qBARhB,4C,2DAWdC,W,uCAAa,WAAMb,GAAN,mBAAAC,EAAA,sEACOC,MAAM,EAAKJ,iBADlB,WACLK,EADK,QAGHC,GAHG,sBAIH,IAAIC,MAAJ,0BAA6B,EAAKP,gBAAlC,sBAA+DK,EAAIG,SAJhE,uBAMcH,EAAII,OANlB,cAMLO,EANK,OAOLC,EAAaL,OAAOC,QAAQG,GAPvB,kBAQJC,EAAW/C,IAAI,EAAKgD,mBAAmBC,MAAMF,EAAWG,OAAS,IAR7D,4C,2DAWbC,UAAY,SAAChD,GACX,MAAY,aAATA,EACM,EACU,eAATA,EACD,EACU,aAATA,EACD,EACK,gB,KAGhBiD,aAAe,SAACjD,GACd,IAAMkB,EAAQgC,SAASC,gBAAgBC,YAEvC,OAAGlC,EAAQ,IACG,aAATlB,EACM,GACU,eAATA,EACD,GACU,aAATA,EACD,GACK,eACNkB,EAAQ,KAAOA,EAAQ,IACnB,aAATlB,EACM,GACU,eAATA,EACD,GACU,aAATA,EACD,GACK,eAEF,aAATA,EACM,GACU,eAATA,EACD,GACU,aAATA,EACD,GACK,gB,KAIlBqD,YAAc,SAACrD,GACb,MAAY,aAATA,EACM,YACU,eAATA,EACD,cACU,aAATA,EACD,YACK,gB,KAGhBsD,eAAiB,SAACtD,GAChB,MAAY,aAATA,EACM,IACU,eAATA,EACD,IACU,aAATA,EACD,KACK,gB,KAGhByC,mBAAqB,SAAC3C,GACpB,MAAO,CACLC,GAAI,EAAKiD,UAAUlD,EAAK,IACxBY,KAAM,EAAKuC,aAAanD,EAAK,IAC7BE,KAAM,EAAKqD,YAAYvD,EAAK,IAC5BW,MAAOX,EAAK,GAAGW,MACf8C,MAAO,EAAKD,eAAexD,EAAK,M,KAKpC+C,kBAAoB,SAAC/C,GACnB,MAAO,CACLC,GAAID,EAAK,GAAGC,GACZwB,OAAQzB,EAAK,GAAGyB,OAChBC,KAAM1B,EAAK,GAAG0B,QC1FCgC,G,iNAEnBC,YAAc,IAAIhC,E,EAElBiC,MAAQ,CACNpE,SAAU,GACVgC,QAAS,GACTqC,SAAS,EACTC,OAAO,EACPpE,gBAAiB,iBACjBgB,YAAa,GACbG,YAAa,GACbkD,WAAY,GACZC,aAAc,EACdC,eAAgB,EAChBC,MAAO,GACPC,gBAAiB,KACjBC,MAAM,EACNC,WAAY,I,EAcdC,oBAAsB,WACpB,EAAKX,YACF7B,cAAcyC,MAAK,SAAC/E,GACnB,EAAKgF,SAAS,CACZhF,WACAqE,SAAS,OAEVY,MAAM,EAAKC,U,EAGlBC,mBAAqB,WACnB,EAAKhB,YACFf,aAAa2B,MAAK,SAAC/C,GAClB,EAAKgD,SAAS,CACZhD,UACAqC,SAAS,OAEVY,MAAM,EAAKC,U,EAGlBA,QAAU,SAACE,GACT,EAAKJ,SAAS,CAACX,SAAS,EAAOC,OAAO,K,EAGxCrE,eAAiB,WACf2D,SAASyB,cAAc,mBAAmBC,UAAUC,OAAO,a,EAG7DpF,aAAe,SAACQ,GAKd,IAJA,IAAM6E,EAAY,GACZjE,EAAM,EAAK6C,MAAMpE,SAASW,EAAM,GAAGQ,MACnCnB,EAAW,EAAKoE,MAAMpE,SAASW,EAAM,GAEnC8E,EAAE,EAAGA,EAAEC,KAAKC,IAAIpE,EAAK,GAAIkE,IAC/BD,EAAUC,GAAK,CAAChF,GAAIgF,EAAG/D,WAAY,aAGrC,EAAKsD,SAAS,CACZ9E,gBAAiB,EAAKkE,MAAMpE,SAASW,EAAM,GAAGD,KAC9CQ,YAAa,CACXT,GAAIE,EACJS,KAAMpB,EAASoB,KACfV,KAAMV,EAASU,KACfS,MAAOnB,EAASmB,MAChB8C,MAAOjE,EAASiE,OAElB5C,YAAamE,IAGf5B,SAASyB,cAAc,mBAAmBC,UAAUM,OAAO,a,EAG7DvF,gBAAkB,SAAC+E,GACjB,EAAKJ,SAAS,CACZT,WAAYa,EAAES,OAAOC,S,EAIzBC,eAAiB,WACf,IAAIC,EAAO,EACLC,EAAmB,EAAK7B,MAAMlD,YAC9BgF,EAAkB,EAAK9B,MAAMG,WAC7B4B,EAAcvC,SAASyB,cAAc,YAY3C,OAV8B,IAA3Ba,EAAgBzC,QACjB0C,EAAYxE,MAAMyE,MAAQ,UAC1BD,EAAYL,MAAQ,yCACfE,IAEwB,IAA5BC,EAAiBxC,QAClB0C,EAAYxE,MAAMyE,MAAQ,UAC1BD,EAAYL,MAAQ,4CACfE,IAEK,IAATA,G,EAKLK,eAAiB,WACfzC,SAASyB,cAAc,sBAAsB1D,MAAM2E,cAAgB,OACnE1C,SAASyB,cAAc,aAAakB,UAAW,G,EAGjDC,iBAAmB,WACjB5C,SAASyB,cAAc,sBAAsB1D,MAAM2E,cAAgB,OACnE1C,SAASyB,cAAc,aAAakB,UAAW,EAC/C3C,SAASyB,cAAc,YAAYkB,UAAW,G,EAGhDnG,UAAY,WACV,GAAG,EAAK2F,iBAAkB,CACxB,IAAMI,EAAcvC,SAASyB,cAAc,YAE3C,IAAuB,IAApB,EAAKjB,MAAMQ,KACZ,EAAKI,SAAS,CACZN,MAAO+B,YAAY,EAAKC,YAAa,EAAKtC,MAAMlD,YAAY+C,SAG9DkC,EAAYxE,MAAMyE,MAAQ,UAC1BD,EAAYL,MAAZ,gCACA,EAAKU,uBACA,CACL,EAAKxB,SAAS,CACZ9E,gBAAiB,iBACjBgB,YAAa,GACbG,YAAa,GACbkD,WAAY,GACZC,aAAc,EACdC,eAAgB,EAChBC,MAAO,GACPC,gBAAiB,KACjBC,MAAM,IAGRhB,SAASyB,cAAc,aAAaS,MAAQ,GAC5ClC,SAASyB,cAAc,YAAYsB,UAAY,OAC/CR,EAAYL,MAAQ,sBAGpB,IADA,IAAMc,EAAM,EAAKxC,MAAM/C,YACfoE,EAAE,EAAGA,EAAEmB,EAAInD,OAAQgC,IACzBmB,EAAInB,GAAG/D,WAAa,YAGtB,EAAK2E,oB,EAKX/E,cAAgB,SAACuF,GACf,EAAK7B,SAAS,CACZL,gBAAiBkC,K,EAerBC,WAAa,WACX,IACMC,EAAc,IAAIC,KAExB,OADiBD,EAAYE,WAAa,IAAMF,EAAYG,aAAe,KAAOH,EAAYI,UAAY,IAF3F,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAEPJ,EAAYK,YAAc,IAAML,EAAYM,e,EAIrKX,YAAc,WAKZ,IAJA,IAAMY,EAAM,GACRC,EAAI,EACFX,EAAM,EAAKxC,MAAM/C,YAEfoE,EAAE,EAAGA,EAAEmB,EAAInD,OAAQgC,IACA,wBAAtBmB,EAAInB,GAAG/D,YAA8D,4BAAtBkF,EAAInB,GAAG/D,aACvD4F,EAAIC,GAAKX,EAAInB,GACb8B,KAIJ,IAAMhG,EAAM+F,EAAI7D,OACV+D,EAAO9B,KAAK+B,MAAM,EAAI/B,KAAKgC,UAAYnG,EAAM,EAAI,EAAI,IAE3D,EAAKyD,SAAS,CACZ3D,YAAa,EAAKsG,iBAAiBL,EAAIE,GAAM/G,MAI/C,IADA,IAAIgF,EAAI,EACFA,EAAEmB,EAAInD,QAAQ,CAClB,GAAyB,0BAAtBmD,EAAInB,GAAG/D,WACR,GAAGkF,EAAInB,GAAGhF,KAAO,EAAK2D,MAAMO,gBAAiB,CAC3C,IAAMiD,EAAUhB,EAAInB,GACdoC,EAAO,eAAOD,EAAP,CAAgBlG,WAAY,wBAEzC,EAAKsD,SAAS,CACZ3D,YAAY,GAAD,mBAAMuF,EAAIpD,MAAM,EAAGiC,IAAnB,CAAuBoC,GAAvB,YAAmCjB,EAAIpD,MAAMiC,EAAE,OAG5D,IAAIqC,EAAU,EAAK1D,MAAMI,aACzBsD,IAEA,EAAK9C,SAAS,CACZR,aAAcsD,QAGX,CACL,IAAMF,EAAUhB,EAAInB,GACdoC,EAAO,eAAOD,EAAP,CAAgBlG,WAAY,4BAEzC,EAAKsD,SAAS,CACZ3D,YAAY,GAAD,mBAAMuF,EAAIpD,MAAM,EAAGiC,IAAnB,CAAuBoC,GAAvB,YAAmCjB,EAAIpD,MAAMiC,EAAE,OAG5D,IAAIsC,EAAU,EAAK3D,MAAMK,eACzBsD,IAEA,EAAK/C,SAAS,CACZP,eAAgBsD,IAKtB,IAAM5B,EAAcvC,SAASyB,cAAc,YAExC,EAAKjB,MAAMI,aAAekB,KAAK+B,MAAM,EAAKrD,MAAM/C,YAAYoC,OAAO,IACpEuE,cAAc,EAAK5D,MAAMM,OACzByB,EAAYxE,MAAMyE,MAAQ,UAC1BD,EAAYL,MAAZ,2BAAwC,EAAK1B,MAAMG,WAAnD,cACAX,SAASyB,cAAc,YAAYsB,UAAY,UAC/C/C,SAASyB,cAAc,YAAYkB,UAAW,EAC9C,EAAKvB,SAAS,CACZJ,MAAM,IAGR,EAAKI,SAAS,CACZH,WAAY,CACV5C,OAAQ,EAAKmC,MAAMG,WACnBrC,KAAM,EAAK4E,gBAIf,EAAKmB,QAAQ,EAAK7D,MAAMS,YACxBY,EAAImB,EAAInD,OAAS,GAET,EAAKW,MAAMK,eAAiBiB,KAAK+B,MAAM,EAAKrD,MAAM/C,YAAYoC,OAAO,KAC7EuE,cAAc,EAAK5D,MAAMM,OACzByB,EAAYxE,MAAMyE,MAAQ,UAC1BD,EAAYL,MAAQ,gBACpBlC,SAASyB,cAAc,YAAYsB,UAAY,UAC/C/C,SAASyB,cAAc,YAAYkB,UAAW,EAC9C,EAAKvB,SAAS,CACZJ,MAAM,IAGR,EAAKI,SAAS,CACZH,WAAY,CACV5C,OAAQ,WACRC,KAAM,EAAK4E,gBAIf,EAAKmB,QAAQ,EAAK7D,MAAMS,YACxBY,EAAImB,EAAInD,OAAS,GAGnBgC,M,EAIJwC,QAAU,SAACC,GACTzF,MAAM,4DAA6D,CACjE0F,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUL,KAEtBnD,MAAK,SAACyD,GAAD,OAAcC,QAAQC,IAAI,+CAC/BzD,OAAM,SAACX,GAAD,OAAWmE,QAAQnE,MAAMA,O,mFAjRhCqE,KAAK7D,sBACL6D,KAAKxD,uB,yCAGYyD,GACdD,KAAKvE,MAAMS,aAAe+D,EAAU/D,YACrC8D,KAAKxD,uB,uCA2IQ0D,GAEf,IADA,IAAMjC,EAAM+B,KAAKvE,MAAM/C,YACfoE,EAAE,EAAGA,EAAEmB,EAAInD,OAAQgC,IACzB,GAAGmB,EAAInB,GAAGhF,KAAOoI,EAAQ,CACvB,IAAMjB,EAAUhB,EAAInB,GACdoC,EAAO,eAAOD,EAAP,CAAgBlG,WAAY,0BACzC,MAAM,GAAN,mBAAWkF,EAAIpD,MAAM,EAAGiC,IAAxB,CAA4BoC,GAA5B,YAAwCjB,EAAIpD,MAAMiC,EAAE,Q,+BA6HhD,IAAD,EACgFkD,KAAKvE,MAArFpE,EADA,EACAA,SAAUgC,EADV,EACUA,QAASqC,EADnB,EACmBA,QAASC,EAD5B,EAC4BA,MAAOpE,EADnC,EACmCA,gBAAiBgB,EADpD,EACoDA,YAAaG,EADjE,EACiEA,YAElEyH,EACJ,yBAAKpJ,UAAU,SACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQM,SAAUA,EAAUC,eAAgB0I,KAAK1I,eAAgBC,gBAAiBA,EAAiBC,aAAcwI,KAAKxI,aAAcC,UAAWuI,KAAKvI,UAAWC,gBAAiBsI,KAAKtI,kBACrL,kBAAC,EAAD,CAAUa,YAAaA,EAAaG,YAAaA,EAAaC,cAAeqH,KAAKrH,iBAEpF,yBAAK5B,UAAU,aACb,kBAAC,EAAD,CAASsC,QAASA,MAKlB+G,EAAU1E,EAAU,kBAAC,EAAD,MAAc,KAClC2E,EAAe1E,EAAQ,kBAAC,EAAD,MAAqB,KAC5C2E,EAAmB5E,GAAWC,EAAe,KAANwE,EAE7C,OACE,kBAAC,IAAMI,SAAP,KACGH,EACAC,EACAC,O,GAjUwBE,cCNjCC,IAASC,OAAO,kBAAC,EAAD,MAASzF,SAAS0F,eAAe,W","file":"static/js/main.86d5875d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error.02430bb8.png\";","import React from 'react';\n\nimport './spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"wrSpinner\">\n      <div className=\"loadingio-spinner-dual-ball-jfpwos7i8vf\">\n        <div className=\"ldio-xg2gjvq53mq\">\n          <div></div><div></div><div></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;","import React from 'react';\n\nimport './error-indicator.css';\nimport iconError from './error.png';\n\nconst ErrorIndicator = () => {\n  return (\n    <div className=\"wrErrorIndicator\">\n      <img src={iconError} alt=\"Icon Error\" />\n      <span className=\"boom\">Boom!</span>\n      <span>something has gone terribli wrong</span>\n      <span>(but we are already fixing it)</span>\n    </div>\n  );\n};\n\nexport default ErrorIndicator;","import React from 'react';\n\nimport './header.css';\n\nconst Header = ({settings, onOpenSelector, currentModeName, onSelectMode, gameStart, onGetDataPlayer}) => {\n  const items = settings.map((item) => {\n    const {id, mode} = item;    \n    \n    return (\n      <li key={id} onClick={() => onSelectMode(id)} className=\"formSelectListItem jsFormListItem\">{mode}</li>\n    );\n  });\n\n  return (\n    <div className=\"wrHeader\">\n      <div className=\"title\">- Game In Dots -</div>\n      <div className=\"startingForm\">\n        <div className=\"formSelectArrow\">\n          <div className=\"jsFormParent\"> \n            <div onClick={onOpenSelector} className=\"formSelectContent jsFormText\">{currentModeName}</div>\n            <ul className=\"formSelectList jsFormList\">\n              {items}\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"wrNameUser\"><input onChange={onGetDataPlayer} type=\"text\" className=\"nameUser\" maxLength=\"20\" placeholder=\"Enter your name\" /></div>\n\n        <div><button onClick={gameStart} className=\"btnPlay\">Play</button></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;","import React from 'react';\n\nimport './play-zone.css';\n\nconst PlayZone = ({currentMode: {field, size}, arrayFields, onSelectField}) => {\n  const num = field;\n  const siz = size;\n  const fields = arrayFields.map((item) => {\n    const {id, namesClass} = item;\n\n    return (\n      <div onClick={() => onSelectField(id)} key={id} className={namesClass} style={{width: `${siz}px`, height: `${siz}px`}}></div>\n    );  \n  });\n\n  return (\n    <div className=\"wrPlayZone\">\n      <div className=\"wrMessage\"><textarea name=\"text\" className=\"message\">Welcome! Play Game In Dots?</textarea></div>\n      <div className=\"playZone\" style={{width: `${num*siz+num*4}px`}}>\n        {fields}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayZone;","import React from 'react';\n\nimport './results.css';\n\nconst  Results = ({winners}) => {\n  const items = winners.map((item) => {\n    const {id, winner, date} = item;\n    \n    return (\n      <li key={id} className=\"leaderListItem\">\n        <div className=\"plaerName\">{winner}</div>\n        <div className=\"victoryDate\">{date}</div>\n      </li>    \n    );\n  });\n  \n  return (\n    <div className=\"wrResults\">\n      <div className=\"resultsTitle\">Leader Board</div>\n      <ul className=\"leaderList\">\n        {items}\n      </ul>\n    </div>\n  );\n};\n\nexport default Results;","export default class GameService {\n  _gameSettings = 'https://starnavi-frontend-test-task.herokuapp.com/game-settings';\n  _winnersResults = 'https://starnavi-frontend-test-task.herokuapp.com/winners';\n  \n  getSettings = async(url) => {\n    const res = await fetch(this._gameSettings);\n    \n    if(!res.ok) {\n      throw new Error(`Could not fetch ${this._gameSettings}, received ${res.status}`)\n    }\n    const objSettings = await res.json();\n    const resSettings = Object.entries(objSettings);\n    return resSettings.map(this._transformSettings);\n  };\n  \n  getWinners = async(url) => {\n    const res = await fetch(this._winnersResults);\n    \n    if(!res.ok) {\n      throw new Error(`Could not fetch ${this._winnersResults}, received ${res.status}`)\n    }\n    const objWinners = await res.json();\n    const resWinners = Object.entries(objWinners);\n    return resWinners.map(this._transformWinners).slice(resWinners.length - 5);\n  };\n  \n  getIdMode = (mode) => {\n    if(mode === 'easyMode') {\n      return 1;\n    } else if(mode === 'normalMode') {\n      return 2;\n    } else if(mode === 'hardMode') {\n      return 3;\n    } else return 'Unknown mode';\n  };\n  \n  getFieldSize = (mode) => {\n    const width = document.documentElement.clientWidth;\n    \n    if(width < 468) {\n      if(mode === 'easyMode') {\n        return 54;\n      } else if(mode === 'normalMode') {\n        return 25;\n      } else if(mode === 'hardMode') {\n        return 15;\n      } else return 'Unknown mode';    \n    } else if(width > 467 && width < 668) {\n      if(mode === 'easyMode') {\n        return 80;\n      } else if(mode === 'normalMode') {\n        return 38;\n      } else if(mode === 'hardMode') {\n        return 24;\n      } else return 'Unknown mode';\n    } else {\n      if(mode === 'easyMode') {\n        return 85;\n      } else if(mode === 'normalMode') {\n        return 45;\n      } else if(mode === 'hardMode') {\n        return 30;\n      } else return 'Unknown mode'; \n    }\n  };\n  \n  getNameMode = (mode) => {\n    if(mode === 'easyMode') {\n      return 'Easy Mode';\n    } else if(mode === 'normalMode') {\n      return 'Normal Mode';\n    } else if(mode === 'hardMode') {\n      return 'Hard Mode';\n    } else return 'Unknown mode';\n  };\n  \n  getCustomDelay = (mode) => {\n    if(mode === 'easyMode') {\n      return 800;\n    } else if(mode === 'normalMode') {\n      return 1000;\n    } else if(mode === 'hardMode') {\n      return 1100;\n    } else return 'Unknown mode';  \n  }\n  \n  _transformSettings = (item) => {\n    return {\n      id: this.getIdMode(item[0]),\n      size: this.getFieldSize(item[0]),\n      mode: this.getNameMode(item[0]),\n      field: item[1].field,\n      delay: this.getCustomDelay(item[0])\n      //delay: item[1].delay\n    }\n  }; \n  \n  _transformWinners = (item) => {\n    return {\n      id: item[1].id,\n      winner: item[1].winner,\n      date: item[1].date\n    }\n  };\n};","import React, {Component} from 'react';\n\nimport Spinner from '../spinner/spinner';\nimport ErrorIndicator from '../error-indicator/error-indicator';\nimport Header from '../header/header';\nimport PlayZone from '../play-zone/play-zone';\nimport Results from '../results/results';\nimport GameService from '../../services/game-services.js';\n\nimport './app.css';\n\nexport default class App extends Component {\n\n  gameService = new GameService();\n  \n  state = {\n    settings: [],\n    winners: [],\n    loading: true,\n    error: false,\n    currentModeName: 'Pick game mode',\n    currentMode: [],\n    arrayFields: [],\n    dataPlayer: '',\n    playerPoints: 0,\n    computerPoints: 0,\n    start: '',\n    selectedFieldId: null,\n    stop: false,\n    winnerDate: []\n  };\n\n  componentDidMount() {\n    this.loadingGameSettings();\n    this.loadingLeaderBoard();\n  };\n  \n  componentDidUpdate(prevState) {\n    if(this.state.winnerDate !== prevState.winnerDate) {\n      this.loadingLeaderBoard();\n    }\n  }\n\n  loadingGameSettings = () => {\n    this.gameService\n      .getSettings().then((settings) => {\n        this.setState({\n          settings,\n          loading: false\n        });\n      }).catch(this.onError);\n  };\n  \n  loadingLeaderBoard = () => {\n    this.gameService\n      .getWinners().then((winners) => {\n        this.setState({\n          winners,\n          loading: false\n        });\n      }).catch(this.onError);\n  };\n  \n  onError = (e) => {\n    this.setState({loading: false, error: true});\n  };\n  \n  onOpenSelector = () => {\n    document.querySelector('.formSelectList').classList.toggle('isActive');\n  };\n  \n  onSelectMode = (key) => {\n    const arrFields = [];\n    const num = this.state.settings[key - 1].field;\n    const settings = this.state.settings[key - 1];\n    \n    for(let i=0; i<Math.pow(num, 2); i++) {\n      arrFields[i] = {id: i, namesClass: 'gameFiled'};\n    }\n    \n    this.setState({\n      currentModeName: this.state.settings[key - 1].mode,\n      currentMode: {\n        id: key,\n        size: settings.size,\n        mode: settings.mode,\n        field: settings.field,\n        delay: settings.delay\n      },\n      arrayFields: arrFields\n    });\n    \n    document.querySelector('.formSelectList').classList.remove('isActive');\n  };\n\n  onGetDataPlayer = (e) => {\n    this.setState({\n      dataPlayer: e.target.value\n    });\n  };\n  \n  dataValidation = () => {\n    let flag = 0;\n    const selectValidation = this.state.currentMode;\n    const inputValidation = this.state.dataPlayer;\n    const messageArea = document.querySelector('.message');\n    \n    if(inputValidation.length === 0) {\n      messageArea.style.color = '#e85a5f';\n      messageArea.value = 'Validation error: Invalid player name';\n    } else flag++;\n    \n    if(selectValidation.length === 0) {\n      messageArea.style.color = '#e85a5f';\n      messageArea.value = 'Validation error: Game mode not selected';\n    } else flag++;\n    \n    if(flag === 2) {\n      return true;\n    } else return false;\n  };\n\n  activeElements = () => {\n    document.querySelector('.formSelectContent').style.pointerEvents = 'auto';\n    document.querySelector('.nameUser').disabled = false;  \n  };\n  \n  inactiveElements = () => {\n    document.querySelector('.formSelectContent').style.pointerEvents = 'none';\n    document.querySelector('.nameUser').disabled = true;\n    document.querySelector('.btnPlay').disabled = true;  \n  };\n  \n  gameStart = () => {  \n    if(this.dataValidation()) {\n      const messageArea = document.querySelector('.message');\n      \n      if(this.state.stop === false) {   \n        this.setState({\n          start: setInterval(this.randomField, this.state.currentMode.delay)\n        });\n        \n        messageArea.style.color = '#a1a1a1';\n        messageArea.value = `Let's go, the game has begun!`;\n        this.inactiveElements();\n      } else {\n        this.setState({\n          currentModeName: 'Pick game mode',\n          currentMode: [],\n          arrayFields: [],\n          dataPlayer: '',\n          playerPoints: 0,\n          computerPoints: 0,\n          start: '',\n          selectedFieldId: null,\n          stop: false\n        });\n        \n        document.querySelector('.nameUser').value = '';\n        document.querySelector('.btnPlay').innerHTML = 'Play';\n        messageArea.value = 'Will we play again?';\n        \n        const arr = this.state.arrayFields;\n        for(let i=0; i<arr.length; i++) {\n          arr[i].namesClass = 'gameFiled';\n        } \n        \n        this.activeElements();\n      }\n    }\n  };\n  \n  onSelectField = (idField) => {\n    this.setState({\n      selectedFieldId: idField\n    });\n  };\n  \n  toggleNamesClass(idRand) {\n    const arr = this.state.arrayFields;\n    for(let i=0; i<arr.length; i++) {\n      if(arr[i].id === idRand) {\n        const oldItem = arr[i];\n        const newItem = {...oldItem, namesClass: 'gameFiled randomField'};\n        return [...arr.slice(0, i), newItem, ...arr.slice(i+1)] \n      }\n    }\n  };\n  \n  getWinTime = () => {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const currentDate = new Date();\n    const fullDate = currentDate.getHours() + ':' + currentDate.getMinutes() + '; ' + currentDate.getDate() + ' ' + months[currentDate.getMonth()] + ' ' + currentDate.getFullYear();\n    return fullDate;\n  };\n  \n  randomField = () => {\n    const buf = [];\n    let k = 0;\n    const arr = this.state.arrayFields;\n    \n    for(let i=0; i<arr.length; i++) {\n      if(arr[i].namesClass !== 'gameFiled playField' && arr[i].namesClass !== 'gameFiled computerField') {\n        buf[k] = arr[i];\n        k++;\n      }\n    }\n     \n    const num = buf.length;\n    const rand = Math.floor(0 + Math.random() * (num - 1 + 1 - 0));\n    \n    this.setState({\n      arrayFields: this.toggleNamesClass(buf[rand].id) \n    });\n\n    let i = 0;\n    while(i<arr.length) {\n      if(arr[i].namesClass === 'gameFiled randomField') {\n        if(arr[i].id === this.state.selectedFieldId) {\n          const oldItem = arr[i];\n          const newItem = {...oldItem, namesClass: 'gameFiled playField'};\n          \n          this.setState({\n            arrayFields: [...arr.slice(0, i), newItem, ...arr.slice(i+1)] \n          });\n          \n          let points1 = this.state.playerPoints;\n          points1++;\n          \n          this.setState({\n            playerPoints: points1\n          });\n          \n        } else {\n          const oldItem = arr[i];\n          const newItem = {...oldItem, namesClass: 'gameFiled computerField'};\n          \n          this.setState({\n            arrayFields: [...arr.slice(0, i), newItem, ...arr.slice(i+1)]\n          });\n\n          let points2 = this.state.computerPoints;\n          points2++;\n          \n          this.setState({\n            computerPoints: points2\n          });\n        }\n      }\n\n      const messageArea = document.querySelector('.message');\n      \n      if(this.state.playerPoints > Math.floor(this.state.arrayFields.length/2)) {\n        clearInterval(this.state.start);\n        messageArea.style.color = '#a1a1a1';\n        messageArea.value = `Congratulations, ${this.state.dataPlayer}, you won!`;\n        document.querySelector('.btnPlay').innerHTML = 'Restart';\n        document.querySelector('.btnPlay').disabled = false;\n        this.setState({\n          stop: true\n        });\n        \n        this.setState({\n          winnerDate: {\n            winner: this.state.dataPlayer,\n            date: this.getWinTime()\n          }\n        });\n        \n        this.setDate(this.state.winnerDate);\n        i = arr.length + 1;\n        \n      } else if(this.state.computerPoints > Math.floor(this.state.arrayFields.length/2)) {\n        clearInterval(this.state.start);\n        messageArea.style.color = '#a1a1a1';\n        messageArea.value = 'Computer won!';\n        document.querySelector('.btnPlay').innerHTML = 'Restart';\n        document.querySelector('.btnPlay').disabled = false;\n        this.setState({\n          stop: true\n        });\n        \n        this.setState({\n          winnerDate: {\n            winner: 'Computer',\n            date: this.getWinTime()\n          }\n        });\n        \n        this.setDate(this.state.winnerDate); \n        i = arr.length + 1;\n        \n      }\n      i++;\n    }\n  };\n  \n  setDate = (userData) => {\n    fetch('https://starnavi-frontend-test-task.herokuapp.com/winners', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData)\n    })\n    .then((response) => console.log('Congratulations, data sent successfully!'))\n    .catch((error) => console.error(error));\n  };\n\n  render() {\n    const {settings, winners, loading, error, currentModeName, currentMode, arrayFields} = this.state;\n    \n    const app = (\n      <div className=\"wrApp\">\n        <div className=\"wrAppCol1\">\n          <Header settings={settings} onOpenSelector={this.onOpenSelector} currentModeName={currentModeName} onSelectMode={this.onSelectMode} gameStart={this.gameStart} onGetDataPlayer={this.onGetDataPlayer} />\n          <PlayZone currentMode={currentMode} arrayFields={arrayFields} onSelectField={this.onSelectField} />\n        </div>\n        <div className=\"wrAppCol2\">\n          <Results winners={winners} />\n        </div>\n      </div>\n    );\n    \n    const spinner = loading ? <Spinner /> : null;\n    const errorMessage = error ? <ErrorIndicator /> : null;\n    const visibleContent = !(loading || error) ? app : null;\n    \n    return (\n      <React.Fragment>\n        {spinner}\n        {errorMessage}\n        {visibleContent}\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}